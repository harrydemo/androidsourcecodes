Notas durante el desarrollo (comienzo 2-3-2010):

1. Acceso a los contactos del telefono con api level <2.0:

http://developer.android.com/guide/topics/providers/content-providers.html

import android.provider.Contacts.People;
import android.database.Cursor;

// Form an array specifying which columns to return. 
String[] projection = new String[] {
                             People._ID,
                             People._COUNT,
                             People.NAME,
                             People.NUMBER
                          };

// Get the base URI for the People table in the Contacts content provider.
Uri contacts =  People.CONTENT_URI;

// Make the query. 
Cursor managedCursor = managedQuery(contacts,
                         projection, // Which columns to return 
                         null,       // Which rows to return (all rows)
                         null,       // Selection arguments (none)
                         // Put the results in ascending order by name
                         People.NAME + " ASC");

2. Acceso a los contactos del telefono con api level >=2.0 
(ContactsContract nueva, People y otros deprecated):

http://developer.android.com/resources/samples/ContactManager/src/com/example/android/contactmanager/ContactManager.html

 private Cursor getContacts()
    {
        // Run query
        Uri uri = ContactsContract.Contacts.CONTENT_URI;
        String[] projection = new String[] {
                ContactsContract.Contacts._ID,
                ContactsContract.Contacts.DISPLAY_NAME
        };
        String selection = ContactsContract.Contacts.IN_VISIBLE_GROUP + " = '" +
                (mShowInvisible ? "0" : "1") + "'";
        String[] selectionArgs = null;
        String sortOrder = ContactsContract.Contacts.DISPLAY_NAME + " COLLATE LOCALIZED ASC";

        return managedQuery(uri, projection, selection, selectionArgs, sortOrder);
    }

    
    Anotar que hay formas de obtener un cursor, y que son válidas para todas las apis
    mediante Cursor cursor =  managedQuery(...), que por así decirlo ejecuta 
    directamente la query y mediante Cursor cursor = getContentResolver.query (....) 
    que hay que usar posteriormente startManagingCursor (cursor) para ejecutar la query.
    
    